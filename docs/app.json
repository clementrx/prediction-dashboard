[{"name":"server.R","content":"server <- function(input, output, session) {\n  \n  observeEvent(input$hideSidebar, {\n    if (input$hideSidebar %% 2 == 1) {\n      shinyjs::hide(id = \"Sidebar\")\n    } else {\n      shinyjs::show(id = \"Sidebar\")\n    }\n  })\n  \n  data <- reactive({\n    \n    req(input$file)  # Ensure file is uploaded\n    data <- read.csv2(input$file$datapath)\n    # data <- read.csv2(\"pred_20240925.csv\")\n    \n    data = data %>% \n      mutate(P1 = ifelse(is.na(P1), 0, P1)) %>%\n      arrange(R_pmuNumber, C_number) %>% \n      distinct(horseName, saddle, C_uuid, .keep_all = TRUE) %>% \n      group_by(C_uuid) %>% \n      mutate(seuil_P1 = quantile(P1, probs = 0.9, na.rm = T),\n             seuil_P3 = quantile(PP, probs = 0.75, na.rm = T),\n             seuil_P4 = quantile(P4, probs = 0.6, na.rm = T),\n             P_global = (3*P1+2*PP+1*P4)/sum(P1*3, PP*2, P4*1),\n             sumP1 = P1 / sum(P1)) %>% \n      ungroup() %>% \n      mutate(emoji = as.character(emoji)) %>% \n      mutate(smile = case_when(\n        emoji == \"1\" ~ \"😊\",\n        emoji == \"2\" ~ \"😐\",\n        emoji == \"3\" ~ \"☹️\",\n        is.na(emoji) ~ \"🤔\",\n        TRUE ~ emoji\n      ),\n      # ferrure = case_when(\n      #   shoeing == \"1\" ~ \"😊\",\n      #   shoeing == \"2\" ~ \"😐\",\n      #   shoeing == \"3\" ~ \"☹️\",\n      #   is.na(shoeing) ~ \"🤔\",\n      #   TRUE ~ shoeing\n      # ),\n      # last_ferrure = case_when(\n      #   last1_shoes == \"1\" ~ \"😊\",\n      #   last1_shoes == \"2\" ~ \"😐\",\n      #   last1_shoes == \"3\" ~ \"☹️\",\n      #   is.na(last1_shoes) ~ \"🤔\",\n      #   TRUE ~ last1_shoes\n      # ),\n      horseName = ifelse(PREP_D4 == 1, paste0(horseName, \" ⭐\"), horseName),\n      horseName = ifelse(CLASS_INF == 1, paste0(horseName, \" ⬇️\"), horseName),\n      last_comment = ifelse(is.na(last_comment), \"\", last_comment),\n      formFigs = ifelse(is.na(formFigs), \"\", formFigs)\n      )\n    \n    data <- mutate(data, horse_label = paste0(saddle, '-', horseName))\n    data <- mutate(data, reunion_label = paste0(R_pmuNumber, ' - ', R_name))\n    data <- mutate(data, course_label = paste0(C_number, ' - ', C_name))\n    data$C_time <- sub(\"^(\\\\d{2}:\\\\d{2}).*$\", \"\\\\1\", data$C_time )\n    \n    return(data)\n  })\n  \n  output$hipp_id_graph <- renderUI({\n    df <- data()\n    hipp <- unique(df$reunion_label)\n    selectInput('hipp_filter_id_graph', 'Réunion', choices = hipp)\n  })\n  \n  output$course_filter_ui_graph <- renderUI({\n    req(input$hipp_filter_id_graph)  # Ensure the input is not NULL\n    df <- data()\n    valid_courses <- unique(df$course_label[df$reunion_label == input$hipp_filter_id_graph])\n    selectInput(\"course_filter_graph\", \"Course\", choices = valid_courses)\n  })\n  \n  filtered_data <- reactive({\n    req(input$hipp_filter_id_graph, input$course_filter_graph)  # Ensure both inputs are available\n    df <- data()\n    df %>%\n      filter(reunion_label == input$hipp_filter_id_graph, course_label == input$course_filter_graph)\n  })\n  \n  \n  output$heure <- renderText({\n    \n    filtered <- filtered_data()\n    paste0('Heure de la course : ', unique(filtered$C_time))\n  })\n  \n  \n  # Fonction de rendu pour le tableau\n  output$mytable <- render_gt({\n    req(filtered_data())  # Ensure filtered data is available\n    \n    filtered <- filtered_data()\n    if (nrow(filtered) == 0) {\n      return(NULL)\n    }\n    \n    infos1 = unique(filtered$C_caraList1)\n    infos2 = unique(filtered$C_caraList2)\n    \n    filtered %>% \n      select(saddle, horseName, trainerName, jockeyName, \n             #totalPrize,\n             driver_ratio_topp, trainer_ratio_topp, horse_ratio_topp,\n             #cote, \n             smile,\n             shoeing, \n             last1_shoes,\n             last2_shoes,\n             last3_shoes,\n             jour_last_course, mean_ratio_temps_last12_month,\n             P_global,\n             P1, PP, P4,\n             #CLASS_INF, \n             sumP1,\n             driver_ratio_topp_evol, trainer_ratio_topp_evol, last_comment,\n             formFigs) %>%\n      arrange(desc(P_global)) %>%  \n      mutate(#.pred_win = formattable::percent(.pred_win),\n        P1 = P1*100,\n        PP = PP*100,\n        P4 = P4*100,\n        mean_ratio_temps_last12_month = digits(mean_ratio_temps_last12_month*100, 2),\n        # label = paste0(horseName, \";\", jockeyName, \";\", trainerName),\n        P_global = digits(P_global*100, 2),\n        driver_ratio_topp = driver_ratio_topp*100,\n        trainer_ratio_topp = trainer_ratio_topp*100,\n        horse_ratio_topp = horse_ratio_topp*100) %>% \n        # CLASS_INF = ifelse(CLASS_INF == 0, \"\", \"1\")) %>% \n        # PREP_D4 = ifelse(PREP_D4 == 0, \"\", \"1\")) %>% \n      # select(-c(horseName, jockeyName, trainerName)) %>% \n      gt() %>%\n      text_transform(\n        locations = cells_body(columns = shoeing),\n        fn = function(x) {\n          vapply(x, generate_images, character(1))\n        }\n      ) %>%\n      # text_transform(\n      #   locations = cells_body(columns = last1_shoes),\n      #   fn = function(x) {\n      #     vapply(x, generate_images, character(1))\n      #   }\n      # ) %>%\n      # text_transform(\n      #   locations = cells_body(columns = last2_shoes),\n      #   fn = function(x) {\n      #     vapply(x, generate_images, character(1))\n      #   }\n      # ) %>%\n      # text_transform(\n      #   locations = cells_body(columns = last3_shoes),\n      #   fn = function(x) {\n      #     vapply(x, generate_images, character(1))\n      #   }\n      # ) %>%\n      cols_merge(\n        columns = c(last1_shoes, last2_shoes, last3_shoes),\n        pattern = \"{1};{2};{3}\"\n      ) %>%\n      text_transform(\n        locations = cells_body(columns = last1_shoes),\n        fn = function(x) {\n          vapply(x, function(cell) {\n            image1 <- word(cell, 1, sep = \";\")\n            image2 <- word(cell, 2, sep = \";\")\n            image3 <- word(cell, 3, sep = \";\")\n            \n            glue::glue(\n              \"<div style='margin-bottom:10px'>{generate_images(image1)}<\/div>\n           <div style='margin-bottom:10px'>{generate_images(image2)}<\/div>\n           <div>{generate_images(image3)}<\/div>\"\n            )\n          }, character(1))\n        }\n      ) %>% \n      # Afficher les images sous la nouvelle colonne\n      tab_header(\n        title = md(infos1),\n        subtitle = paste(infos2)\n      ) %>% \n      cols_merge(\n        columns = c(horseName, jockeyName, trainerName),\n        pattern = \"{1};{2};{3}\"\n      ) %>% \n      text_transform(\n        locations = cells_body(\n          columns = c(horseName)\n        ),\n        fn = function(x) {\n          horseName <- word(x, 1, sep = \";\")\n          jockeyName <- word(x, 2, sep = \";\")\n          trainerName <- word(x, 3, sep = \";\")\n          \n          # Ajout d'une étoile si D4 == 1\n          \n          # Construction du contenu HTML avec le style\n          glue::glue(\n            \"<div><span style='font-weight:bold;font-variant:small-caps;font-size:14px'>{horseName}<\/span><\/div>\n      <div><span style='font-weight:bold;color:grey;font-size:12px'>{jockeyName}<\/span><\/div>\n      <div><span style='font-weight:bold;color:grey;font-size:10px'>{trainerName}<\/span><\/div>\"\n          )\n        }\n      ) %>% \n      # gt_theme_espn() %>% \n      cols_label(\n        saddle = \"N\",\n        P1 = 'Proba<br>Gagnant',\n        PP = 'Proba<br>Placé',\n        P4 = 'Proba<br>TOP4',\n        # CLASS_INF = 'C.<br>inf',\n        # PREP_D4 = 'Prep.<br>D4',\n        horseName = 'Cheval',\n        driver_ratio_topp = \"Ratio<br>Jockey\",\n        trainer_ratio_topp = \"Ratio<br>Entr.\",\n        horse_ratio_topp = \"Ratio<br>Cheval\",\n        mean_ratio_temps_last12_month = 'Score (100)<br>1 an',\n        P_global = 'Proba<br>Globale',\n        jour_last_course = 'Repos',\n        # formFigs = \"musique\",\n        last_comment = \"Commentaire<br>Dernière course\",\n        smile = \"😊\",\n        formFigs = \"musique\",\n        shoeing = \"Ferrure\",\n        last1_shoes = \"Ferrure<br>(old)\",\n        .fn = md) %>% \n      # fmt_currency(columns = cote, decimals = 1, currency = 'EUR', placement = 'right') %>% \n      # gt_color_rows(.pred_win, palette = \"ggsci::blue_material\", domain = c(0,1)) %>% \n      gt_color_rows(mean_ratio_temps_last12_month, palette = \"ggsci::green_material\", direction = 1) %>% \n      gt_color_rows(P_global, palette = \"ggsci::blue_material\", direction = 1) %>% \n      tab_style(\n        style = cell_fill(color = \"palegreen\"),\n        location = cells_body(\n          columns = c(saddle, horseName),\n          rows = sumP1 > 0.3 & P1 > 90\n        )) %>% \n      gt_plt_bar_pct(\n        column = driver_ratio_topp,\n        scaled = TRUE,\n        labels = TRUE,\n        decimals = 2,\n        label_cutoff = 0.1,\n        fill = \"#FFD700\", background = \"lightblue\"\n      ) %>% \n      gt_plt_bar_pct(\n        column = trainer_ratio_topp,\n        scaled = TRUE,\n        labels = TRUE,\n        label_cutoff = 0.1,\n        fill = \"#4682B4\", background = \"lightblue\"\n      ) %>% \n      gt_plt_bar_pct(\n        column = horse_ratio_topp,\n        scaled = TRUE,\n        labels = TRUE,\n        label_cutoff = 0.1,\n        fill = \"#8B4513\", background = \"lightblue\"\n      ) %>% \n      gt_plt_bar_pct(\n        column = PP,\n        scaled = TRUE,\n        labels = TRUE,\n        # decimals = 3,\n        label_cutoff = 0.1,\n        fill = \"#2CA25F\", background = \"lightblue\",\n        font_size = '13px'\n        # height = '17px'\n      ) %>% \n      gt_plt_bar_pct(\n        column = P1,\n        scaled = TRUE,\n        labels = TRUE,\n        # decimals = 3,\n        label_cutoff = 0.1,\n        fill = \"#b8711a\", background = \"lightblue\",\n        font_size = '13px'\n        # height = '17px'\n      ) %>% \n      gt_plt_bar_pct(\n        column = P4,\n        scaled = TRUE,\n        labels = TRUE,\n        # decimals = 3,\n        label_cutoff = 0.1,\n        fill = \"#C667FC\", background = \"lightblue\",\n        font_size = '13px'\n        # height = '17px'\n      ) %>% \n      data_color(\n        columns = \"smile\",\n        colors = scales::col_factor(\n          palette = c(\"#068a3d\", \"#bfb90d\", \"#962f26\"),\n          levels = c(\"😊\", \"😐\", \"☹️\")\n        )\n      ) %>% \n      tab_footnote(\n        footnote = \"% d'arrivées placées lors des 12 derniers mois, et indicateur de ratio des 2 derniers mois\",\n        locations = cells_column_labels(\n          columns = c(driver_ratio_topp, trainer_ratio_topp, horse_ratio_topp))\n      ) %>% \n      tab_footnote(\n        footnote = \"Nombre de jours depuis la dernière course\",\n        locations = cells_column_labels(\n          columns = c(jour_last_course))\n      ) %>% \n      tab_footnote(\n        footnote = \"⭐ Ferrure les 3 dernières courses, et D4 aujourd'hui\",\n        locations = cells_column_labels(\n          columns = c(horseName))\n      ) %>% \n      tab_footnote(\n        footnote = \"⬇️ Course de catégorie inférieure à la précédente\",\n        locations = cells_column_labels(\n          columns = c(horseName))\n      ) %>% \n      tab_style(\n        style = list(\n          # cell_fill(color = \"#F9E3D6\"),\n          cell_text(style = \"oblique\")\n        ),\n        locations = cells_body(\n          columns = horseName,\n        )\n      ) %>% \n      tab_style(\n        style = list(\n          # cell_fill(color = \"#F9E3D6\"),\n          cell_text(size = px(12))\n        ),\n        locations = cells_body(\n          columns = c(mean_ratio_temps_last12_month, P_global)\n        )\n      ) %>% \n      text_transform(\n        locations = cells_body(\n          columns = driver_ratio_topp,\n          rows = driver_ratio_topp_evol >= 0\n        ),\n        fn = function(x) paste(x, up_arrow)\n      ) %>%\n      text_transform(\n        locations = cells_body(\n          columns = driver_ratio_topp,\n          rows = driver_ratio_topp_evol < 0\n        ),\n        fn = function(x) paste(x, down_arrow)\n      ) %>% \n      text_transform(\n        locations = cells_body(\n          columns = trainer_ratio_topp,\n          rows = trainer_ratio_topp_evol >= 0\n        ),\n        fn = function(x) paste(x, up_arrow)\n      ) %>%\n      text_transform(\n        locations = cells_body(\n          columns = trainer_ratio_topp,\n          rows = trainer_ratio_topp_evol < 0\n        ),\n        fn = function(x) paste(x, down_arrow)\n      ) %>% \n      text_transform(\n        locations = cells_body(\n          columns = c(last_comment, formFigs)\n        ),\n        fn = function(x) {\n          glue::glue(\n            \"<div style='font-size:10px'>{x}<\/div>\"\n          )\n        }\n      ) %>%\n      cols_width(\n        saddle ~ px(50),\n        P1 ~ px(70),\n        PP ~ px(80),\n        P4 ~ px(70),\n        last_comment ~ px(200),\n        smile ~ px(30),\n        formFigs ~ px(200),\n        horseName ~ px(100),\n        driver_ratio_topp ~ px(70),\n        trainer_ratio_topp ~ px(70),\n        horse_ratio_topp ~ px(60),\n        mean_ratio_temps_last12_month ~ px(60),\n        P_global ~ px(60),\n        # mean_ratio_temps_last12_month, mean_ratio_temps_last12_month ~ px(60),\n        # mean_ratio_temps_last12_month, mean_ratio_temps_last12_month~ px(60),\n        jour_last_course~ px(60),\n        everything() ~ px(60)) %>% \n      cols_hide(c(driver_ratio_topp_evol,\n                  trainer_ratio_topp_evol,\n                  sumP1)) \n    \n  })\n  \n  # Render the boxes with the specific information\n  output$sg_box <- renderUI({\n    df <- filtered_data()\n    sg <- df %>%\n      arrange(-P1) %>%\n      filter(P1 > unique(df$seuil_P1))\n    \n    box(\n      title = \"SG\",\n      status = \"primary\",\n      solidHeader = TRUE,\n      paste0(\"SG : \", paste0(sg$saddle, collapse = \"-\"))\n    )\n  })\n  \n  output$sp_box <- renderUI({\n    df <- filtered_data()\n    sp <- df %>%\n      arrange(-PP) %>%\n      filter(PP > unique(df$seuil_P3))\n    \n    box(\n      title = \"SP\",\n      status = \"info\",\n      solidHeader = TRUE,\n      paste0(\"SP : \", paste0(sp$saddle, collapse = \"-\"))\n    )\n  })\n  \n  output$multi_box <- renderUI({\n    df <- filtered_data()\n    multi <- df %>%\n      arrange(-P4) %>%\n      filter(P4 > unique(df$seuil_P4))\n    \n    box(\n      title = \"Multi\",\n      status = \"success\",\n      solidHeader = TRUE,\n      paste0(\"Multi : \", paste0(multi$saddle, collapse = \"-\"))\n    )\n  })\n \n  \n}\n","type":"text"},{"name":"ui.R","content":"ui <- fluidPage(\n  useShinyjs(),\n  navbarPage(\n    theme = shinytheme('cerulean'),\n    \n    \"PMU\",\n    \n    tabPanel(\"Upload CSV\",\n             fluidRow(\n               column(4, fileInput(\"file\", \"Choisir un fichier CSV\", accept = c(\".csv\")))\n             ),\n             fluidRow(\n               column(12, tableOutput(\"file_contents\"))\n             )),\n    \n    \n    tabPanel(\"Graphiques\",\n             fluidRow(\n               div(id = \"Sidebar\", sidebarPanel(width = 12,\n                                                fluidRow(\n                                                  column(4, uiOutput('hipp_id_graph')),\n                                                  column(6, uiOutput('course_filter_ui_graph'))),\n                                                fluidRow(textOutput(\"heure\")))\n               ),\n               mainPanel(width = \"100%\",\n                         fluidRow(\n                           column(4, actionButton(\"hideSidebar\", \"Cacher/afficher les filtres\", class = \"btn btn-sm\"))\n                         ),\n                         # Boîtes au-dessus du tableau\n                         fluidRow(\n                           column(4, uiOutput(\"sg_box\")),\n                           column(4, uiOutput(\"sp_box\")),\n                           column(4, uiOutput(\"multi_box\"))\n                         ),\n                         fluidRow(gt_output(\"mytable\")))))\n    \n    \n  )\n)","type":"text"},{"name":"global.R","content":"library(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(formattable)\nlibrary(RColorBrewer)\nlibrary(shinythemes)\nlibrary(shinyjs)\nlibrary(scales)\nlibrary(shinydashboard)\nlibrary(data.table)\nlibrary(stringr)\n\nup_arrow <- \"<span style=\\\"color:green\\\">&#9650;<\/span>\"\ndown_arrow <- \"<span style=\\\"color:red\\\">&#9660;<\/span>\"\n\n# Fonction pour générer les images selon les valeurs\ngenerate_images <- function(x) {\n  if (!grepl(\"P|D\", x)) {\n    return(\"-\")\n  }\n  \n  images <- list()\n  \n  # Exemple : utiliser un chemin complet\n  if (grepl(\"D\", x)) {\n    d_count <- stringr::str_count(x, \"D\")\n    images <- append(images, rep(local_image(filename = \"shoes-D.svg\", height = 15), d_count))\n  }\n  \n  if (grepl(\"P\", x)) {\n    p_count <- stringr::str_count(x, \"P\")\n    images <- append(images, rep(local_image(filename = \"shoes-P.svg\", height = 15), p_count))\n  }\n  \n  return(paste(images, collapse = \" \"))\n}\n\n\n","type":"text"},{"name":"shoes-D.svg","content":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"22px\" height=\"24px\" viewBox=\"0 0 22 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <title>ideogram/equip/DF<\/title>\n    <g id=\"UI-Guide\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"Library/guide03\" transform=\"translate(-554.000000, -225.000000)\" fill=\"#212227\">\n            <g id=\"ideogram/equip/DF\" transform=\"translate(553.000000, 225.000000)\">\n                <path d=\"M20.980333,7.0199618 C21.6332994,8.68707141 22,10.5625386 22,12.5454545 C22,16.2299702 21.0161495,19.7048271 19,22 L19,22 L20,22 L20,24 L16,24 L16,22 L16,22 C17.6082527,20.1702339 19,17.2094809 19,14 C19,12.4585839 18.7490815,10.9986231 18.3051533,9.69471911 Z M8,22 C8.01547375,23.058832 8.01547375,23.7254987 8,24 L4,24 L4,23.999 L7.13827394,20.8623651 C7.41403598,21.2774686 7.70394099,21.6587228 8,22 Z M12,0 C14.5930443,0 16.9555737,1.23817503 18.7324323,3.26896566 L21,1 L23,3 L3,23 L1,21 L3.1255049,18.875289 C2.37129942,16.9947157 2,14.8098831 2,12.5454545 C2,5.61679132 6.4771525,0 12,0 Z M12,4 C8.22120961,4 5,8.4771525 5,14 C5,14.9173058 5.1169611,15.8176808 5.32144063,16.6785415 L16.0837048,5.91616536 C14.9234423,4.71112807 13.5060028,4 12,4 Z\" id=\"Oval-Copy-4\"><\/path>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>","type":"text"},{"name":"shoes-P.svg","content":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"20px\" height=\"24px\" viewBox=\"0 0 20 24\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <title>ideogram/equip/P<\/title>\n    <g id=\"UI-Guide\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"Library/guide03\" transform=\"translate(-555.000000, -325.000000)\" fill=\"#212227\">\n            <g id=\"ideogram/equip/P\" transform=\"translate(553.000000, 325.000000)\">\n                <path d=\"M18,24 C20.6666667,20 22,16.1818182 22,12.5454545 C22,5.61679132 17.5228475,0 12,0 C6.4771525,0 2,5.61679132 2,12.5454545 C2,16.1818182 3.33333333,20 6,24 L8,24 L10,22 L14,22 L16,24 L18,24 Z\" id=\"Oval-Copy-4\"><\/path>\n            <\/g>\n        <\/g>\n    <\/g>\n<\/svg>","type":"text"}]
